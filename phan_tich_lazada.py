import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
import time
import io
import numpy as np
import random
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
import calendar
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import altair as alt
import base64

# H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá t√πy ch·ªânh
def format_currency(value):
    if pd.isna(value) or value == 0:
        return "0 VND"
    return f"{value:,.0f} VND".replace(",", ".")

# H√†m ƒë·ªãnh d·∫°ng ph·∫ßn trƒÉm
def format_percent(value):
    if pd.isna(value):
        return "0%"
    return f"{value:.2f}%"

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Ph√¢n t√≠ch ƒë∆°n h√†ng Lazada", 
    layout="wide", 
    page_icon="üìä",
    initial_sidebar_state="expanded"
)

# CSS n√¢ng cao (gi·ªØ nguy√™n nh∆∞ code c·ªßa b·∫°n)
st.markdown("""
<style>
    :root {
        --primary: #FF6200;
        --primary-light: #FF8A3D;
        --primary-dark: #D14700;
        --secondary: #00A0D6;
        --secondary-light: #33C0F3;
        --text-main: #333333;
        --text-light: #666666;
        --bg-main: #F8F9FA;
        --bg-card: #FFFFFF;
        --bg-sidebar: #1E293B;
        --success: #28A745;
        --warning: #FFC107;
        --danger: #DC3545;
    }
    .main { background-color: var(--bg-main); font-family: 'Roboto', sans-serif; color: var(--text-main); }
    .css-1d391kg, .css-1wrcr25 { background-color: var(--bg-sidebar); }
    .sidebar .sidebar-content { background-color: var(--bg-sidebar); }
    .stButton>button { background-color: var(--primary); color: white; border-radius: 6px; padding: 12px 20px; margin: 8px 0; font-weight: 600; border: none; transition: all 0.3s ease; text-transform: uppercase; letter-spacing: 0.5px; }
    .stButton>button:hover { background-color: var(--primary-light); transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
    .metric-card { background-color: var(--bg-card); padding: 24px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); text-align: center; margin: 12px 0; transition: all 0.3s ease; border-top: 4px solid var(--primary); }
    .metric-card:hover { transform: translateY(-5px); box-shadow: 0 8px 24px rgba(0,0,0,0.12); }
    .metric-card h2 { font-size: 28px; font-weight: 700; color: var(--primary); margin: 8px 0; }
    .metric-card h4 { font-size: 16px; font-weight: 500; color: var(--text-light); margin-bottom: 12px; text-transform: uppercase; letter-spacing: 0.5px; }
    .tab-header { font-size: 32px; font-weight: 700; background: linear-gradient(90deg, var(--primary) 0%, var(--primary-light) 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; margin-bottom: 24px; text-align: center; padding: 16px 0; }
    .sub-header { font-size: 22px; font-weight: 600; color: var(--primary-dark); margin-top: 32px; margin-bottom: 16px; padding-bottom: 8px; border-bottom: 2px solid var(--primary-light); }
    .filter-section { background-color: var(--bg-card); padding: 16px; border-radius: 12px; margin-bottom: 24px; box-shadow: 0 2px 8px rgba(0,0,0,0.05); }
    .filter-section h3 { font-size: 18px; font-weight: 600; color: var(--text-main); margin-bottom: 16px; }
    .dataframe { width: 100%; border-collapse: collapse; }
    .dataframe th { background-color: var(--primary); color: white; padding: 12px; text-align: left; font-weight: 600; }
    .dataframe td { padding: 10px; border-bottom: 1px solid #ddd; }
    .dataframe tr:nth-child(even) { background-color: #f9f9f9; }
    .dataframe tr:hover { background-color: #f1f1f1; }
    .stTextInput>div>div>input, .stSelectbox>div>div>select, .stMultiselect>div>div>select { border-radius: 6px; border: 1px solid #ddd; padding: 10px; }
    .stTextInput>div>div>input:focus, .stSelectbox>div>div>select:focus, .stMultiselect>div>div>select:focus { border-color: var(--primary); box-shadow: 0 0 0 2px rgba(255,98,0,0.2); }
    .stTabs [data-baseweb="tab-list"] { background-color: var(--bg-card); border-radius: 8px 8px 0 0; padding: 0 20px; }
    .stTabs [data-baseweb="tab"] { padding: 12px 24px; font-weight: 500; }
    .stTabs [aria-selected="true"] { background-color: var(--primary); color: white; border-radius: 8px 8px 0 0; }
    .stProgress > div > div > div > div { background-color: var(--primary); }
    a { color: var(--secondary); text-decoration: none; }
    a:hover { color: var(--secondary-light); text-decoration: underline; }
    .footer { text-align: center; margin-top: 40px; padding: 20px; font-size: 14px; color: var(--text-light); border-top: 1px solid #eee; }
    .custom-progress { height: 10px; border-radius: 5px; margin-top: 5px; }
    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    .animate-fadeIn { animation: fadeIn 0.5s ease-in-out; }
    @media (max-width: 768px) { .tab-header { font-size: 24px; } .metric-card { padding: 16px; } .metric-card h2 { font-size: 22px; } }
</style>
""", unsafe_allow_html=True)

# C√°c h√†m h·ªó tr·ª£ (gi·ªØ nguy√™n nh∆∞ code c·ªßa b·∫°n)
@st.cache_data(ttl=3600, show_spinner=False)
def scrape_lazada_products(search_query, max_retries=3):
    if not search_query:
        return pd.DataFrame()
    for attempt in range(max_retries):
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
            driver.execute_cdp_cmd('Network.setUserAgentOverride', {"userAgent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'})
            url = f"https://www.lazada.vn/catalog/?q={search_query.replace(' ', '+')}&page=1"
            driver.get(url)
            wait_time = random.randint(20, 30)
            st.toast(f"ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Lazada... ({wait_time}s)")
            time.sleep(wait_time)
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(5)
            product_cards = driver.find_elements(By.CSS_SELECTOR, "div[data-qa-locator='product-item']")
            data = []
            for card in product_cards[:50]:
                try:
                    title_elem = card.find_element(By.CSS_SELECTOR, ".RfADt a")
                    title = title_elem.text
                    link = title_elem.get_attribute('href')
                    price_elem = card.find_element(By.CSS_SELECTOR, ".ooOxS")
                    price_text = price_elem.text.replace("‚Ç´", "").replace(".", "").strip()
                    price = int(price_text) if price_text.isdigit() else 0
                    try:
                        quantity_elem = card.find_element(By.CSS_SELECTOR, "span[data-qa-locator='quantity-sold']")
                        quantity_text = quantity_elem.text.replace("ƒê√£ b√°n", "").strip()
                        quantity = int(''.join(filter(str.isdigit, quantity_text))) if quantity_text else np.nan
                    except NoSuchElementException:
                        quantity = np.nan
                    try:
                        rating_elem = card.find_element(By.CSS_SELECTOR, ".score-average")
                        rating = float(rating_elem.text)
                    except (NoSuchElementException, ValueError):
                        rating = np.nan
                    data.append({"S·∫£n Ph·∫©m": title, "S·ªë ti·ªÅn b√°n tr√™n lazada": price, "S·ªë l∆∞·ª£ng b√°n": quantity, "ƒê√°nh gi√°": rating, "Link": link})
                except Exception:
                    continue
            driver.quit()
            df = pd.DataFrame(data)
            df = df.drop_duplicates(subset=["S·∫£n Ph·∫©m"])
            return df
        except Exception as e:
            if attempt < max_retries - 1:
                st.warning(f"L·ªói khi c√†o d·ªØ li·ªáu (l·∫ßn {attempt+1}): {str(e)}. ƒêang th·ª≠ l·∫°i...")
                time.sleep(5)
            else:
                st.error(f"L·ªói khi c√†o d·ªØ li·ªáu sau {max_retries} l·∫ßn th·ª≠: {str(e)}")
                return pd.DataFrame()

def display_metric_with_sparkline(label, value, delta=None, delta_color="normal", chart_data=None, chart_color="#FF6200"):
    if isinstance(value, (int, float)):
        if label.startswith("T·ªïng s·ªë") or "l∆∞·ª£ng" in label.lower():
            value_str = f"{value:,.0f}".replace(",", ".")
        else:
            value_str = format_currency(value)
    else:
        value_str = str(value)
    delta_html = ""
    if delta:
        color = "green" if delta_color == "good" else "red" if delta_color == "bad" else "gray"
        icon = "‚Üë" if delta_color == "good" else "‚Üì" if delta_color == "bad" else "‚Üí"
        delta_html = f"<span style='color:{color};font-size:14px;'>{icon} {delta}</span>"
    chart_html = ""
    if chart_data is not None and len(chart_data) > 1:
        fig, ax = plt.figure(figsize=(3, 0.5)), plt.gca()
        ax.plot(range(len(chart_data)), chart_data, color=chart_color)
        ax.fill_between(range(len(chart_data)), chart_data, alpha=0.2, color=chart_color)
        ax.set_axis_off()
        buf = io.BytesIO()
        fig.savefig(buf, format='png', transparent=True, bbox_inches='tight', pad_inches=0)
        buf.seek(0)
        img_str = base64.b64encode(buf.read()).decode('utf-8')
        plt.close(fig)
        chart_html = f"<img src='data:image/png;base64,{img_str}' style='width:100%;height:30px;margin-top:5px;'/>"
    st.markdown(f"""
        <div class="metric-card">
            <h4>{label}</h4>
            <h2>{value_str}</h2>
            {delta_html}
            {chart_html}
        </div>
    """, unsafe_allow_html=True)

def create_distribution_chart(df, column, title, color_sequence=None):
    if color_sequence is None:
        color_sequence = px.colors.sequential.Oranges
    if df[column].dtype == 'object':
        value_counts = df[column].value_counts().reset_index()
        value_counts.columns = [column, 'Count']
        fig = px.bar(value_counts, x=column, y='Count', title=title, color=column, color_discrete_sequence=color_sequence, text='Count')
        fig.update_traces(texttemplate='%{text}', textposition='outside')
    else:
        fig = px.histogram(df, x=column, title=title, color_discrete_sequence=color_sequence, marginal="box")
        fig.update_layout(bargap=0.1)
    fig.update_layout(
        title={'text': title, 'y':0.95, 'x':0.5, 'xanchor': 'center', 'yanchor': 'top', 'font': {'size': 22, 'color': '#333333'}},
        xaxis_title_font={'size': 14, 'color': '#666666'}, yaxis_title_font={'size': 14, 'color': '#666666'},
        plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)', xaxis=dict(showgrid=True, gridwidth=1, gridcolor='#EEEEEE'),
        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='#EEEEEE')
    )
    return fig

def plot_time_series(df, date_col, value_col, title, add_trend=True, color='#FF6200'):
    df_sorted = df.sort_values(by=date_col)
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df_sorted[date_col], y=df_sorted[value_col], mode='lines+markers', name=value_col, line=dict(color=color, width=3), marker=dict(size=8, color=color)))
    if add_trend and len(df_sorted) > 2:
        x = np.arange(len(df_sorted))
        y = df_sorted[value_col].values
        slope, intercept, r_value, _, _ = stats.linregress(x, y)
        trend_y = intercept + slope * x
        fig.add_trace(go.Scatter(x=df_sorted[date_col], y=trend_y, mode='lines', name='Xu h∆∞·ªõng', line=dict(color='rgba(255, 98, 0, 0.5)', width=2, dash='dash')))
        trend_direction = "tƒÉng" if slope > 0 else "gi·∫£m"
        r_squared = r_value**2
        fig.add_annotation(x=df_sorted[date_col].iloc[-1], y=trend_y[-1], text=f"Xu h∆∞·ªõng: {trend_direction} (R¬≤ = {r_squared:.2f})", showarrow=True, arrowhead=2, arrowcolor="#FF6200", arrowwidth=2, ax=40, ay=-40, font=dict(size=12, color="#333"), bgcolor="rgba(255, 255, 255, 0.8)", bordercolor="#FF6200", borderwidth=1, borderpad=4)
    fig.update_layout(
        title={'text': title, 'y':0.95, 'x':0.5, 'xanchor': 'center', 'yanchor': 'top', 'font': {'size': 22, 'color': '#333333'}},
        xaxis_title="Ng√†y", yaxis_title=value_col, xaxis_title_font={'size': 14, 'color': '#666666'}, yaxis_title_font={'size': 14, 'color': '#666666'},
        plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)', xaxis=dict(showgrid=True, gridwidth=1, gridcolor='#EEEEEE', tickformat='%d-%m-%Y'),
        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='#EEEEEE'), hovermode="x unified", legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    return fig

# Sidebar (gi·ªØ nguy√™n nh∆∞ng th√™m th√¥ng tin phi√™n b·∫£n)
with st.sidebar:
    st.image("https://laz-img-cdn.alicdn.com/images/ims-web/TB1T7K2d8Cw3KVjSZFuXXcAOpXa.png", width=150)
    st.title("Lazada Analytics")
    st.header("üìä T·∫£i d·ªØ li·ªáu")
    uploaded_file = st.file_uploader("T·∫£i l√™n file Excel (.xlsx)", type=["xlsx"])
    if uploaded_file is not None:
        try:
            with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
                df = pd.read_excel(uploaded_file)
                df.columns = df.columns.str.strip().str.replace(" ‚Ç´", "").str.replace(".", "").str.replace("\t", " ")
                date_cols = ["Ng√†y mua h√†ng", "Ng√†y nh·∫≠n ƒë∆∞·ª£c"]
                for col in date_cols:
                    if col in df.columns:
                        df[col] = pd.to_datetime(df[col], format="%d/%m/%Y", errors="coerce")
                numeric_columns = ["S·ªë ti·ªÅn b√°n tr√™n lazada", "S·ªë ti·ªÅn kh√°ch h√†ng ph·∫£i chi tr·∫£", "Ph√≠ v·∫≠n chuy·ªÉn", "Ph√≠ khuy·∫øn m√£i do ng∆∞·ªùi b√°n tr·∫£ cho lazada", "L·ªói do c√¢n n·∫∑ng tr·ª´ cho nh√† b√°n h√†ng", "Gi·∫£m gi√° t·ª´ Lazada cho ng∆∞·ªùi mua", "Ph√≠ x·ª≠ l√Ω ƒë∆°n h√†ng", "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n", "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n", "S·ªë l∆∞·ª£ng"]
                for col in numeric_columns:
                    if col in df.columns:
                        df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)
                if "Ng√†y mua h√†ng" in df.columns:
                    df["Th√°ng mua h√†ng"] = df["Ng√†y mua h√†ng"].dt.strftime("%Y-%m")
                    df["Qu√Ω"] = df["Ng√†y mua h√†ng"].dt.to_period("Q").astype(str)
                    df["Ng√†y trong tu·∫ßn"] = df["Ng√†y mua h√†ng"].dt.day_name()
                if all(x in df.columns for x in ["Ng√†y mua h√†ng", "Ng√†y nh·∫≠n ƒë∆∞·ª£c"]):
                    df["Th·ªùi gian giao h√†ng (ng√†y)"] = (df["Ng√†y nh·∫≠n ƒë∆∞·ª£c"] - df["Ng√†y mua h√†ng"]).dt.days
                if all(x in df.columns for x in ["S·ªë ti·ªÅn b√°n tr√™n lazada", "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n"]):
                    df["L·ª£i nhu·∫≠n"] = df["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n"] - df["S·ªë ti·ªÅn b√°n tr√™n lazada"]
                    df["Bi√™n l·ª£i nhu·∫≠n (%)"] = (df["L·ª£i nhu·∫≠n"] / df["S·ªë ti·ªÅn b√°n tr√™n lazada"] * 100).replace([np.inf, -np.inf], np.nan).fillna(0)
                st.session_state.df = df
                st.success("‚úÖ T·∫£i file Excel th√†nh c√¥ng!")
                st.info(f"üìë S·ªë l∆∞·ª£ng ƒë∆°n h√†ng: {len(df):,}")
                if "Ng√†y mua h√†ng" in df.columns:
                    start_date = df["Ng√†y mua h√†ng"].min().strftime("%d/%m/%Y")
                    end_date = df["Ng√†y mua h√†ng"].max().strftime("%d/%m/%Y") 
                    st.info(f"üìÖ Kho·∫£ng th·ªùi gian: {start_date} - {end_date}")
                if "S·∫£n Ph·∫©m" in df.columns:
                    num_products = df["S·∫£n Ph·∫©m"].nunique()
                    st.info(f"üè∑Ô∏è S·ªë l∆∞·ª£ng s·∫£n ph·∫©m: {num_products}")
                with st.expander("Xem tr∆∞·ªõc d·ªØ li·ªáu", expanded=False):
                    st.dataframe(df.head())
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {str(e)}")
    else:
        df = pd.DataFrame()
        if "df" in st.session_state:
            st.info("‚ÑπÔ∏è ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ phi√™n tr∆∞·ªõc")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch")
    st.header("üîç C√†o d·ªØ li·ªáu Lazada")
    search_query = st.text_input("T·ª´ kh√≥a t√¨m ki·∫øm", "Rogaine")
    if st.button("üöÄ C√†o d·ªØ li·ªáu"):
        if search_query:
            with st.spinner("ƒêang c√†o d·ªØ li·ªáu t·ª´ Lazada..."):
                scraped_df = scrape_lazada_products(search_query)
                if not scraped_df.empty:
                    st.session_state.scraped_df = scraped_df
                    st.success("‚úÖ C√†o d·ªØ li·ªáu th√†nh c√¥ng!")
                    st.info(f"üîç ƒê√£ t√¨m th·∫•y {len(scraped_df)} s·∫£n ph·∫©m")
                else:
                    st.error("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ho·∫∑c l·ªói khi c√†o d·ªØ li·ªáu.")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")
    st.header("üì± ƒêi·ªÅu h∆∞·ªõng")
    tab_option = st.radio("Ch·ªçn giao di·ªán", ["üìä T·ªïng quan", "üìà Ph√¢n t√≠ch chi ti·∫øt", "üîç Ph√¢n t√≠ch s·∫£n ph·∫©m", "üåê D·ªØ li·ªáu t·ª´ Lazada"], captions=["Dashboard ch√≠nh", "Th·ªëng k√™ s√¢u", "Ph√¢n t√≠ch theo s·∫£n ph·∫©m", "K·∫øt qu·∫£ c√†o t·ª´ Lazada"])
    st.markdown("---")
    st.caption(f"¬© 2025 Lazada Analytics | Phi√™n b·∫£n 2.1")
    st.caption(f"C·∫≠p nh·∫≠t: {datetime.now().strftime('%d/%m/%Y %H:%M')}")

# S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ session state
if "df" in st.session_state:
    df = st.session_state.df
else:
    df = pd.DataFrame()

# Ti√™u ƒë·ªÅ ch√≠nh
st.markdown('<h1 style="text-align: center; color: #FF6200; margin-bottom: 20px;">üì¶ Ph√¢n t√≠ch ƒë∆°n h√†ng Lazada</h1>', unsafe_allow_html=True)

# B·ªô l·ªçc t·ªïng qu√°t
if not df.empty:
    st.markdown('<h2 class="sub-header">üîé B·ªô l·ªçc d·ªØ li·ªáu</h2>', unsafe_allow_html=True)
    with st.container():
        st.markdown('<div class="filter-section animate-fadeIn">', unsafe_allow_html=True)
        st.markdown('<h3>L·ªçc d·ªØ li·ªáu theo ti√™u ch√≠</h3>', unsafe_allow_html=True)
        col1, col2, col3 = st.columns([1, 1, 1], gap="medium")
        with col1:
            if "Ng√†y mua h√†ng" in df.columns:
                min_date = df["Ng√†y mua h√†ng"].min().to_pydatetime()
                max_date = df["Ng√†y mua h√†ng"].max().to_pydatetime()
                date_range = st.date_input("Ch·ªçn kho·∫£ng th·ªùi gian", [min_date, max_date], min_value=min_date, max_value=max_date, format="DD/MM/YYYY")
                if len(date_range) == 2:
                    start_date, end_date = date_range
                    filtered_df = df[(df["Ng√†y mua h√†ng"] >= pd.to_datetime(start_date)) & (df["Ng√†y mua h√†ng"] <= pd.to_datetime(end_date))]
                else:
                    filtered_df = df
            else:
                filtered_df = df
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'Ng√†y mua h√†ng' ƒë·ªÉ l·ªçc theo th·ªùi gian.")
        with col2:
            if "S·∫£n Ph·∫©m" in df.columns:
                product_options = ["T·∫•t c·∫£"] + sorted(df["S·∫£n Ph·∫©m"].unique().tolist())
                selected_product = st.selectbox("Ch·ªçn s·∫£n ph·∫©m", product_options, index=0)
                if selected_product != "T·∫•t c·∫£":
                    filtered_df = filtered_df[filtered_df["S·∫£n Ph·∫©m"] == selected_product]
        with col3:
            if "Tr·∫°ng th√°i" in df.columns:
                status_options = ["T·∫•t c·∫£"] + sorted(df["Tr·∫°ng th√°i"].unique().tolist())
                selected_status = st.selectbox("Ch·ªçn tr·∫°ng th√°i ƒë∆°n h√†ng", status_options, index=0)
                if selected_status != "T·∫•t c·∫£":
                    filtered_df = filtered_df[filtered_df["Tr·∫°ng th√°i"] == selected_status]
            else:
                st.info("‚ÑπÔ∏è Kh√¥ng c√≥ c·ªôt 'Tr·∫°ng th√°i' trong d·ªØ li·ªáu.")
        with st.expander("üîß B·ªô l·ªçc n√¢ng cao", expanded=False):
            col4, col5 = st.columns(2)
            with col4:
                if "S·ªë ti·ªÅn b√°n tr√™n lazada" in df.columns:
                    min_price = float(df["S·ªë ti·ªÅn b√°n tr√™n lazada"].min())
                    max_price = float(df["S·ªë ti·ªÅn b√°n tr√™n lazada"].max())
                    price_range = st.slider("Kho·∫£ng gi√° (VND)", min_price, max_price, (min_price, max_price), step=1000.0, format="%.0f")
                    filtered_df = filtered_df[(filtered_df["S·ªë ti·ªÅn b√°n tr√™n lazada"] >= price_range[0]) & (filtered_df["S·ªë ti·ªÅn b√°n tr√™n lazada"] <= price_range[1])]
            with col5:
                if "S·ªë l∆∞·ª£ng" in df.columns:
                    min_quantity = int(df["S·ªë l∆∞·ª£ng"].min())
                    max_quantity = int(df["S·ªë l∆∞·ª£ng"].max())
                    quantity_range = st.slider("Kho·∫£ng s·ªë l∆∞·ª£ng b√°n", min_quantity, max_quantity, (min_quantity, max_quantity))
                    filtered_df = filtered_df[(filtered_df["S·ªë l∆∞·ª£ng"] >= quantity_range[0]) & (filtered_df["S·ªë l∆∞·ª£ng"] <= quantity_range[1])]
        if st.button("üîÑ ƒê·∫∑t l·∫°i b·ªô l·ªçc", help="X√≥a t·∫•t c·∫£ b·ªô l·ªçc v√† tr·ªü v·ªÅ d·ªØ li·ªáu ban ƒë·∫ßu"):
            filtered_df = df
            st.success("‚úÖ ƒê√£ ƒë·∫∑t l·∫°i b·ªô l·ªçc!")
        st.markdown('</ clausdiv>', unsafe_allow_html=True)
        st.info(f"üìä S·ªë l∆∞·ª£ng ƒë∆°n h√†ng sau khi l·ªçc: {len(filtered_df):,}")

    # C√°c tab giao di·ªán
    if tab_option == "üìä T·ªïng quan":
        st.markdown('<h1 class="tab-header">T·ªïng quan</h1>', unsafe_allow_html=True)
        col_metrics = st.columns(4)
        with col_metrics[0]:
            total_orders = len(filtered_df)
            display_metric_with_sparkline("T·ªïng s·ªë ƒë∆°n h√†ng", total_orders)
        with col_metrics[1]:
            total_revenue = filtered_df["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n"].sum() if "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n" in filtered_df.columns else 0
            display_metric_with_sparkline("T·ªïng doanh thu", total_revenue)
        with col_metrics[2]:
            total_profit = filtered_df["L·ª£i nhu·∫≠n"].sum() if "L·ª£i nhu·∫≠n" in filtered_df.columns else 0
            display_metric_with_sparkline("T·ªïng l·ª£i nhu·∫≠n", total_profit)
        with col_metrics[3]:
            avg_delivery = filtered_df["Th·ªùi gian giao h√†ng (ng√†y)"].mean() if "Th·ªùi gian giao h√†ng (ng√†y)" in filtered_df.columns else 0
            display_metric_with_sparkline("Th·ªùi gian giao trung b√¨nh", f"{avg_delivery:.1f} ng√†y")
        if "Ng√†y mua h√†ng" in filtered_df.columns and "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n" in filtered_df.columns:
            revenue_by_date = filtered_df.groupby("Ng√†y mua h√†ng")["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n"].sum().reset_index()
            fig = plot_time_series(revenue_by_date, "Ng√†y mua h√†ng", "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n", "Xu h∆∞·ªõng doanh thu theo th·ªùi gian")
            st.plotly_chart(fig, use_container_width=True)

    elif tab_option == "üìà Ph√¢n t√≠ch chi ti·∫øt":
        st.markdown('<h1 class="tab-header">Ph√¢n t√≠ch chi ti·∫øt</h1>', unsafe_allow_html=True)
        
        # Bi·ªÉu ƒë·ªì doanh thu theo th√°ng
        if "Th√°ng mua h√†ng" in filtered_df.columns and "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n" in filtered_df.columns:
            revenue_by_month = filtered_df.groupby("Th√°ng mua h√†ng")["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n"].sum().reset_index()
            fig_month = px.bar(revenue_by_month, x="Th√°ng mua h√†ng", y="T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n", title="Doanh thu theo th√°ng", 
                              color="T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n", color_continuous_scale=px.colors.sequential.Oranges, text_auto=True)
            fig_month.update_traces(textposition='outside')
            fig_month.update_layout(title_x=0.5, plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
            st.plotly_chart(fig_month, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi ph√≠ v·∫≠n chuy·ªÉn
        if "Ph√≠ v·∫≠n chuy·ªÉn" in filtered_df.columns:
            fig_shipping = create_distribution_chart(filtered_df, "Ph√≠ v·∫≠n chuy·ªÉn", "Ph√¢n ph·ªëi ph√≠ v·∫≠n chuy·ªÉn")
            st.plotly_chart(fig_shipping, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì l·ª£i nhu·∫≠n theo ng√†y trong tu·∫ßn
        if "Ng√†y trong tu·∫ßn" in filtered_df.columns and "L·ª£i nhu·∫≠n" in filtered_df.columns:
            profit_by_day = filtered_df.groupby("Ng√†y trong tu·∫ßn")["L·ª£i nhu·∫≠n"].sum().reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']).reset_index()
            fig_day = px.bar(profit_by_day, x="Ng√†y trong tu·∫ßn", y="L·ª£i nhu·∫≠n", title="L·ª£i nhu·∫≠n theo ng√†y trong tu·∫ßn", 
                            color="L·ª£i nhu·∫≠n", color_continuous_scale=px.colors.sequential.Oranges, text_auto=True)
            fig_day.update_traces(textposition='outside')
            fig_day.update_layout(title_x=0.5, plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
            st.plotly_chart(fig_day, use_container_width=True)

    elif tab_option == "üîç Ph√¢n t√≠ch s·∫£n ph·∫©m":
        st.markdown('<h1 class="tab-header">Ph√¢n t√≠ch s·∫£n ph·∫©m</h1>', unsafe_allow_html=True)
        
        # Top 10 s·∫£n ph·∫©m b√°n ch·∫°y
        if "S·∫£n Ph·∫©m" in filtered_df.columns and "S·ªë l∆∞·ª£ng" in filtered_df.columns:
            top_products = filtered_df.groupby("S·∫£n Ph·∫©m")["S·ªë l∆∞·ª£ng"].sum().nlargest(10).reset_index()
            fig_top = px.bar(top_products, x="S·∫£n Ph·∫©m", y="S·ªë l∆∞·ª£ng", title="Top 10 s·∫£n ph·∫©m b√°n ch·∫°y", 
                            color="S·ªë l∆∞·ª£ng", color_continuous_scale=px.colors.sequential.Oranges, text_auto=True)
            fig_top.update_traces(textposition='outside')
            fig_top.update_layout(title_x=0.5, plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
            st.plotly_chart(fig_top, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì l·ª£i nhu·∫≠n theo s·∫£n ph·∫©m
        if "S·∫£n Ph·∫©m" in filtered_df.columns and "L·ª£i nhu·∫≠n" in filtered_df.columns:
            profit_by_product = filtered_df.groupby("S·∫£n Ph·∫©m")["L·ª£i nhu·∫≠n"].sum().nlargest(10).reset_index()
            fig_profit = px.pie(profit_by_product, values="L·ª£i nhu·∫≠n", names="S·∫£n Ph·∫©m", title="Top 10 s·∫£n ph·∫©m c√≥ l·ª£i nhu·∫≠n cao nh·∫•t",
                               color_discrete_sequence=px.colors.sequential.Oranges)
            fig_profit.update_layout(title_x=0.5)
            st.plotly_chart(fig_profit, use_container_width=True)
        
        # Ph√¢n ph·ªëi gi√° b√°n s·∫£n ph·∫©m
        if "S·∫£n Ph·∫©m" in filtered_df.columns and "S·ªë ti·ªÅn b√°n tr√™n lazada" in filtered_df.columns:
            fig_price_dist = create_distribution_chart(filtered_df, "S·ªë ti·ªÅn b√°n tr√™n lazada", "Ph√¢n ph·ªëi gi√° b√°n s·∫£n ph·∫©m")
            st.plotly_chart(fig_price_dist, use_container_width=True)

    elif tab_option == "üåê D·ªØ li·ªáu t·ª´ Lazada":
        st.markdown('<h1 class="tab-header">D·ªØ li·ªáu t·ª´ Lazada</h1>', unsafe_allow_html=True)
        if "scraped_df" in st.session_state:
            st.dataframe(st.session_state.scraped_df)
            # Bi·ªÉu ƒë·ªì gi√° s·∫£n ph·∫©m t·ª´ Lazada
            if "S·ªë ti·ªÅn b√°n tr√™n lazada" in st.session_state.scraped_df.columns:
                fig_scraped_price = px.box(st.session_state.scraped_df, y="S·ªë ti·ªÅn b√°n tr√™n lazada", title="Ph√¢n ph·ªëi gi√° s·∫£n ph·∫©m t·ª´ Lazada",
                                          color_discrete_sequence=["#FF6200"])
                fig_scraped_price.update_layout(title_x=0.5)
                st.plotly_chart(fig_scraped_price, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu c√†o t·ª´ Lazada. Vui l√≤ng c√†o d·ªØ li·ªáu t·ª´ sidebar.")

else:
    st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n d·ªØ li·ªáu ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch!")
