import streamlit as st
import pandas as pd
import plotly.express as px
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
import time
import io
import numpy as np
import random

# H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá VND
def format_vnd(number):
    return f"{number:,.0f} VND".replace(",", ".")

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n t√≠ch ƒë∆°n h√†ng Lazada", layout="wide", page_icon="üìä")

# CSS t√πy ch·ªânh
st.markdown("""
    <style>
    .main {background-color: #f5f5f5;}
    .stButton>button {background-color: #ff6200; color: white; border-radius: 5px; padding: 10px 20px; margin: 5px; font-weight: bold;}
    .stSelectbox, .stMultiselect {background-color: #ffffff; border-radius: 5px; padding: 5px;}
    .metric-card {background-color: #ffffff; padding: 20px; border-radius: 10px; box-shadow: 2px 2px 5px rgba(0,0,0,0.1); text-align: center; margin: 10px;}
    .tab-header {font-size: 28px; color: #ff6200; margin-bottom: 20px; text-align: center;}
    .sub-header {font-size: 20px; color: #333; margin-top: 20px; margin-bottom: 10px;}
    .filter-section {background-color: #f0f0f0; padding: 10px; border-radius: 5px; margin-bottom: 20px;}
    </style>
""", unsafe_allow_html=True)

# H√†m c√†o d·ªØ li·ªáu t·ª´ Lazada
def scrape_lazada_products(search_query):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    chrome_options.binary_location = "/usr/bin/chromium"  # ƒê∆∞·ªùng d·∫´n t·ªõi Chromium binary
    
    try:
        # D√πng ChromeDriver t·ª´ g√≥i chromium
        service = Service(executable_path="/usr/lib/chromium/chromedriver")
        driver = webdriver.Chrome(service=service, options=chrome_options)
        url = f"https://www.lazada.vn/catalog/?q={search_query.replace(' ', '+')}&page=1"
        driver.get(url)
        time.sleep(random.randint(5, 10))
        
        elems = driver.find_elements(By.CSS_SELECTOR, ".RfADt [href]")
        titles = [elem.text for elem in elems]
        links = [elem.get_attribute('href') for elem in elems]
        
        elems_price = driver.find_elements(By.CSS_SELECTOR, ".ooOxS")
        prices = [elem.text.replace("‚Ç´", "").replace(".", "").strip() for elem in elems_price]
        prices = [int(price) if price.isdigit() else 0 for price in prices]
        
        quantities = []
        for i in range(len(titles)):
            try:
                quantity_elem = driver.find_element(By.XPATH, f"//div[@data-qa-locator='product-item'][{i+1}]//span[contains(text(), 'ƒê√£ b√°n')]")
                quantity_text = quantity_elem.text.replace("ƒê√£ b√°n", "").strip()
                quantity = int(''.join(filter(str.isdigit, quantity_text))) if quantity_text else np.nan
            except NoSuchElementException:
                quantity = np.nan
            quantities.append(quantity)
        
        driver.quit()
        
        df = pd.DataFrame({
            "S·∫£n Ph·∫©m": titles,
            "S·ªë ti·ªÅn b√°n tr√™n lazada": prices,
            "S·ªë l∆∞·ª£ng b√°n": quantities,
            "Link": links
        })
        return df.head(50)
    except Exception as e:
        st.error(f"L·ªói khi c√†o d·ªØ li·ªáu: {str(e)}")
        return pd.DataFrame()

# T·∫£i d·ªØ li·ªáu t·ª´ file Excel
st.sidebar.header("T·∫£i d·ªØ li·ªáu")
uploaded_file = st.sidebar.file_uploader("T·∫£i l√™n file Excel (.xlsx)", type=["xlsx"])

if uploaded_file is not None:
    try:
        df = pd.read_excel(uploaded_file)
        df.columns = df.columns.str.strip().str.replace(" ‚Ç´", "").str.replace(".", "").str.replace("\t", " ")
        df["Ng√†y mua h√†ng"] = pd.to_datetime(df["Ng√†y mua h√†ng"], format="%d/%m/%Y", errors="coerce")
        df["Ng√†y nh·∫≠n ƒë∆∞·ª£c"] = pd.to_datetime(df["Ng√†y nh·∫≠n ƒë∆∞·ª£c"], format="%d/%m/%Y", errors="coerce")
        numeric_columns = ["S·ªë ti·ªÅn b√°n tr√™n lazada", "S·ªë ti·ªÅn kh√°ch h√†ng ph·∫£i chi tr·∫£", "Ph√≠ v·∫≠n chuy·ªÉn", 
                           "Ph√≠ khuy·∫øn m√£i do ng∆∞·ªùi b√°n tr·∫£ cho lazada", "L·ªói do c√¢n n·∫∑ng tr·ª´ cho nh√† b√°n h√†ng", 
                           "Gi·∫£m gi√° t·ª´ Lazada cho ng∆∞·ªùi mua", "Ph√≠ x·ª≠ l√Ω ƒë∆°n h√†ng", "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n", 
                           "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n", "S·ªë l∆∞·ª£ng"]
        for col in numeric_columns:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)
        st.session_state.df = df
        st.sidebar.success("T·∫£i file Excel th√†nh c√¥ng!")
    except Exception as e:
        st.sidebar.error(f"L·ªói khi ƒë·ªçc file Excel: {str(e)}")
else:
    df = pd.DataFrame()

# C√†o d·ªØ li·ªáu t·ª´ Lazada
st.sidebar.header("C√†o d·ªØ li·ªáu t·ª´ Lazada")
search_query = st.sidebar.text_input("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm s·∫£n ph·∫©m", "Rogaine")
if st.sidebar.button("C√†o d·ªØ li·ªáu"):
    with st.spinner("ƒêang c√†o d·ªØ li·ªáu t·ª´ Lazada..."):
        scraped_df = scrape_lazada_products(search_query)
        if not scraped_df.empty:
            st.session_state.scraped_df = scraped_df
            st.sidebar.success("C√†o d·ªØ li·ªáu th√†nh c√¥ng!")
        else:
            st.sidebar.error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ho·∫∑c l·ªói khi c√†o d·ªØ li·ªáu.")

# S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ session state
if "df" in st.session_state:
    df = st.session_state.df
else:
    df = pd.DataFrame()

# Ti√™u ƒë·ªÅ ch√≠nh
st.title("üì¶ Ph√¢n t√≠ch ƒë∆°n h√†ng Lazada")
st.markdown("---")

# B·ªô l·ªçc t·ªïng
st.markdown('<div class="filter-section"><h3>B·ªô l·ªçc t·ªïng</h3></div>', unsafe_allow_html=True)
col1, col2, col3 = st.columns([1, 2, 1])
with col1:
    product_filter_global = st.text_input("T√¨m ki·∫øm s·∫£n ph·∫©m", "")
with col2:
    date_range_global = st.date_input("Ch·ªçn kho·∫£ng ng√†y mua", 
                                      [df["Ng√†y mua h√†ng"].min(), df["Ng√†y mua h√†ng"].max()] if not df.empty else [pd.to_datetime("2021-01-01"), pd.to_datetime("2025-12-31")], 
                                      key="date_range_global")
with col3:
    apply_filter = st.button("√Åp d·ª•ng b·ªô l·ªçc t·ªïng")

# √Åp d·ª•ng b·ªô l·ªçc t·ªïng
if apply_filter and not df.empty:
    df_filtered = df[df["S·∫£n Ph·∫©m"].str.contains(product_filter_global, case=False, na=False) & 
                     (df["Ng√†y mua h√†ng"].dt.date >= pd.to_datetime(date_range_global[0]).date()) & 
                     (df["Ng√†y mua h√†ng"].dt.date <= pd.to_datetime(date_range_global[1]).date())]
else:
    df_filtered = df.copy() if not df.empty else pd.DataFrame()

# Sidebar ƒëi·ªÅu h∆∞·ªõng
st.sidebar.header("ƒêi·ªÅu h∆∞·ªõng")
tab_option = st.sidebar.selectbox("Ch·ªçn giao di·ªán", ["Ph√¢n t√≠ch ch√≠nh", "Th·ªëng k√™ chi ti·∫øt", "D·ªØ li·ªáu c√†o t·ª´ Lazada"])

# H√†m hi·ªÉn th·ªã s·ªë li·ªáu d·∫°ng th·∫ª
def display_metric(label, value, delta=None):
    if isinstance(value, (int, float)):
        if label == "T·ªïng s·ªë ƒë∆°n h√†ng" or label == "T·ªïng s·ªë l∆∞·ª£ng":
            value_str = f"{value:,.0f}".replace(",", ".")
        else:
            value_str = format_vnd(value)
    else:
        value_str = str(value)
    delta_str = f" ({delta})" if delta else ""
    st.markdown(f"""
        <div class="metric-card">
            <h4>{label}</h4>
            <h2>{value_str}{delta_str}</h2>
        </div>
    """, unsafe_allow_html=True)

# Tab 1: Ph√¢n t√≠ch ch√≠nh
if tab_option == "Ph√¢n t√≠ch ch√≠nh" and not df_filtered.empty:
    st.markdown('<p class="tab-header">Ph√¢n t√≠ch ch√≠nh</p>', unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs(["T·ªïng quan", "Theo s·∫£n ph·∫©m", "Theo ng√†y mua", "L·ªçc d·ªØ li·ªáu"])
    
    with tab1:
        st.subheader("T·ªïng quan ƒë∆°n h√†ng")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            display_metric("T·ªïng s·ªë ƒë∆°n h√†ng", len(df_filtered))
        with col2:
            display_metric("T·ªïng ti·ªÅn kh√°ch tr·∫£", df_filtered["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n"].sum())
        with col3:
            if "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n" in df_filtered.columns:
                display_metric("T·ªïng ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n", df_filtered["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n"].sum())
            else:
                display_metric("T·ªïng ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n", "N/A", "Kh√¥ng c√≥ d·ªØ li·ªáu")
        with col4:
            display_metric("T·ªïng s·ªë l∆∞·ª£ng", df_filtered["S·ªë l∆∞·ª£ng"].sum())
        
        st.markdown('<p class="sub-header">Bi·ªÉu ƒë·ªì t·ªïng quan</p>', unsafe_allow_html=True)
        fig = px.pie(df_filtered, names="S·∫£n Ph·∫©m", values="S·ªë l∆∞·ª£ng", title="T·ª∑ l·ªá s·ªë l∆∞·ª£ng theo s·∫£n ph·∫©m", 
                     color_discrete_sequence=px.colors.sequential.Oranges)
        fig.update_layout(width=1000, height=600)
        st.plotly_chart(fig, use_container_width=True)

    with tab2:
        st.subheader("Ph√¢n t√≠ch theo s·∫£n ph·∫©m")
        product_summary = df_filtered.groupby("S·∫£n Ph·∫©m").agg({
            "S·ªë l∆∞·ª£ng": "sum",
            "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n": "sum",
            "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n": "sum" if "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n" in df_filtered.columns else lambda x: 0
        }).reset_index()
        st.dataframe(product_summary.style.format({
            "S·ªë l∆∞·ª£ng": lambda x: f"{x:,.0f}".replace(",", "."),
            "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n": format_vnd,
            "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n": format_vnd
        }))
        
        st.markdown('<p class="sub-header">Bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng s·∫£n ph·∫©m</p>', unsafe_allow_html=True)
        fig = px.bar(product_summary, x="S·∫£n Ph·∫©m", y="S·ªë l∆∞·ª£ng", title="S·ªë l∆∞·ª£ng s·∫£n ph·∫©m b√°n ra",
                     color="S·∫£n Ph·∫©m", color_discrete_sequence=px.colors.sequential.Oranges)
        fig.update_layout(width=1000, height=600)
        st.plotly_chart(fig, use_container_width=True)

    with tab3:
        st.subheader("Ph√¢n t√≠ch theo ng√†y mua h√†ng")
        date_summary = df_filtered.groupby(df_filtered["Ng√†y mua h√†ng"].dt.date).agg({
            "S·ªë l∆∞·ª£ng": "sum",
            "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n": "sum"
        }).reset_index()
        st.dataframe(date_summary.style.format({
            "S·ªë l∆∞·ª£ng": lambda x: f"{x:,.0f}".replace(",", "."),
            "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n": format_vnd
        }))

        st.markdown('<p class="sub-header">Bi·ªÉu ƒë·ªì doanh thu theo ng√†y</p>', unsafe_allow_html=True)
        fig = px.line(date_summary, x="Ng√†y mua h√†ng", y="T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n", 
                      title="Doanh thu theo ng√†y", line_shape="spline", 
                      color_discrete_sequence=["#ff6200"])
        fig.update_layout(width=1000, height=600)
        st.plotly_chart(fig, use_container_width=True)

    with tab4:
        st.subheader("L·ªçc d·ªØ li·ªáu ƒë∆°n h√†ng")
        col1, col2 = st.columns([1, 3])
        with col1:
            product_filter = st.multiselect("Ch·ªçn s·∫£n ph·∫©m", options=df_filtered["S·∫£n Ph·∫©m"].unique(), 
                                            default=df_filtered["S·∫£n Ph·∫©m"].unique())
            date_range = st.date_input("Ch·ªçn kho·∫£ng ng√†y mua", 
                                      [df_filtered["Ng√†y mua h√†ng"].min(), df_filtered["Ng√†y mua h√†ng"].max()], 
                                      key="date_range_tab4")
            min_price = st.number_input("Gi√° t·ªëi thi·ªÉu", min_value=0, value=0)
            max_price = st.number_input("Gi√° t·ªëi ƒëa", min_value=0, value=int(df_filtered["S·ªë ti·ªÅn b√°n tr√™n lazada"].max()))
            min_total = st.number_input("T·ªïng ti·ªÅn t·ªëi thi·ªÉu", min_value=0, value=0)
            max_total = st.number_input("T·ªïng ti·ªÅn t·ªëi ƒëa", min_value=0, value=int(df_filtered["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n"].max()))
        with col2:
            filtered_df = df_filtered[df_filtered["S·∫£n Ph·∫©m"].isin(product_filter) & 
                                      (df_filtered["Ng√†y mua h√†ng"].dt.date >= pd.to_datetime(date_range[0]).date()) & 
                                      (df_filtered["Ng√†y mua h√†ng"].dt.date <= pd.to_datetime(date_range[1]).date()) &
                                      (df_filtered["S·ªë ti·ªÅn b√°n tr√™n lazada"] >= min_price) &
                                      (df_filtered["S·ªë ti·ªÅn b√°n tr√™n lazada"] <= max_price) &
                                      (df_filtered["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n"] >= min_total) &
                                      (df_filtered["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n"] <= max_total)]
            st.dataframe(filtered_df.style.format({
                "S·ªë l∆∞·ª£ng": lambda x: f"{x:,.0f}".replace(",", "."),
                "S·ªë ti·ªÅn b√°n tr√™n lazada": format_vnd,
                "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi mua thanh to√°n": format_vnd,
                "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n": format_vnd if "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n" in df_filtered.columns else "N/A"
            }))
            if not filtered_df.empty:
                st.markdown('<p class="sub-header">Bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ l·ªçc</p>', unsafe_allow_html=True)
                fig = px.pie(filtered_df, names="S·∫£n Ph·∫©m", values="S·ªë l∆∞·ª£ng", title="T·ª∑ l·ªá s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ l·ªçc",
                             color_discrete_sequence=px.colors.sequential.Oranges)
                fig.update_layout(width=1000, height=600)
                st.plotly_chart(fig, use_container_width=True)
                buffer = io.BytesIO()
                filtered_df.to_excel(buffer, index=False)
                st.download_button("T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ l·ªçc", buffer.getvalue(), "filtered_orders.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# Tab 2: Th·ªëng k√™ chi ti·∫øt
elif tab_option == "Th·ªëng k√™ chi ti·∫øt" and not df_filtered.empty:
    st.markdown('<p class="tab-header">Th·ªëng k√™ chi ti·∫øt</p>', unsafe_allow_html=True)
    
    st.subheader("Ph√¢n t√≠ch l·ª£i nhu·∫≠n")
    if "T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n" in df_filtered.columns:
        df_filtered["L·ª£i nhu·∫≠n"] = df_filtered["T·ªïng s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c thanh to√°n"] - df_filtered["S·ªë ti·ªÅn b√°n tr√™n lazada"]
        profit_ratio = (df_filtered["L·ª£i nhu·∫≠n"].sum() / df_filtered["S·ªë ti·ªÅn b√°n tr√™n lazada"].sum() * 100) if df_filtered["S·ªë ti·ªÅn b√°n tr√™n lazada"].sum() > 0 else 0
    else:
        df_filtered["L·ª£i nhu·∫≠n"] = 0
        profit_ratio = 0
    profit_summary = df_filtered.groupby("S·∫£n Ph·∫©m").agg({
        "L·ª£i nhu·∫≠n": "sum",
        "S·ªë l∆∞·ª£ng": "sum"
    }).reset_index()
    st.dataframe(profit_summary.style.format({
        "S·ªë l∆∞·ª£ng": lambda x: f"{x:,.0f}".replace(",", "."),
        "L·ª£i nhu·∫≠n": format_vnd
    }))
    col1, col2 = st.columns(2)
    with col1:
        display_metric("T·ªïng l·ª£i nhu·∫≠n", df_filtered["L·ª£i nhu·∫≠n"].sum())
    with col2:
        display_metric("T·ª∑ l·ªá l·ª£i nhu·∫≠n", f"{profit_ratio:.1f}%")

    st.markdown('<p class="sub-header">Bi·ªÉu ƒë·ªì l·ª£i nhu·∫≠n theo s·∫£n ph·∫©m</p>', unsafe_allow_html=True)
    fig = px.bar(profit_summary, x="S·∫£n Ph·∫©m", y="L·ª£i nhu·∫≠n", title="L·ª£i nhu·∫≠n theo s·∫£n ph·∫©m",
                 color="S·∫£n Ph·∫©m", color_discrete_sequence=px.colors.sequential.Oranges)
    fig.update_layout(width=1000, height=600)
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("T·ª∑ l·ªá ƒë∆°n mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn")
    free_shipping_ratio = df_filtered["Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn"].mean() * 100 if "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn" in df_filtered.columns else 0
    col1, col2 = st.columns(2)
    with col1:
        display_metric("T·ª∑ l·ªá mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn", f"{free_shipping_ratio:.1f}%")
    with col2:
        if "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn" in df_filtered.columns:
            fig = px.pie(df_filtered, names="Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn", title="Ph√¢n b·ªë ƒë∆°n mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn",
                         color_discrete_sequence=["#ff6200", "#e0e0e0"])
            fig.update_layout(width=1000, height=600)
            st.plotly_chart(fig, use_container_width=True)

    st.subheader("Th·ªëng k√™ chi ph√≠")
    cost_columns = ["Ph√≠ v·∫≠n chuy·ªÉn", "Ph√≠ khuy·∫øn m√£i do ng∆∞·ªùi b√°n tr·∫£ cho lazada", "Ph√≠ x·ª≠ l√Ω ƒë∆°n h√†ng", "L·ªói do c√¢n n·∫∑ng tr·ª´ cho nh√† b√°n h√†ng"]
    available_costs = {col: df_filtered[col].sum() if col in df_filtered.columns else 0 for col in cost_columns}
    cost_summary = pd.DataFrame({
        "Lo·∫°i chi ph√≠": cost_columns,
        "T·ªïng chi ph√≠": [available_costs[col] for col in cost_columns]
    })
    avg_cost_per_order = sum(available_costs.values()) / len(df_filtered) if len(df_filtered) > 0 else 0
    st.dataframe(cost_summary.style.format({
        "T·ªïng chi ph√≠": format_vnd
    }))
    col1, col2 = st.columns(2)
    with col1:
        display_metric("T·ªïng chi ph√≠", sum(available_costs.values()))
    with col2:
        display_metric("Chi ph√≠ trung b√¨nh m·ªói ƒë∆°n", avg_cost_per_order)

    st.markdown('<p class="sub-header">Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ph√≠</p>', unsafe_allow_html=True)
    fig = px.bar(cost_summary, x="Lo·∫°i chi ph√≠", y="T·ªïng chi ph√≠", title="Ph√¢n t√≠ch chi ph√≠",
                 color="Lo·∫°i chi ph√≠", color_discrete_sequence=px.colors.sequential.Oranges)
    fig.update_layout(width=1000, height=600)
    st.plotly_chart(fig, use_container_width=True)

    buffer = io.BytesIO()
    df_filtered.to_excel(buffer, index=False)
    st.download_button("T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu", buffer.getvalue(), "orders_report.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# Tab 3: D·ªØ li·ªáu c√†o t·ª´ Lazada
elif tab_option == "D·ªØ li·ªáu c√†o t·ª´ Lazada":
    st.markdown('<p class="tab-header">D·ªØ li·ªáu c√†o t·ª´ Lazada</p>', unsafe_allow_html=True)
    
    if "scraped_df" in st.session_state and not st.session_state.scraped_df.empty:
        st.subheader("D·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ Lazada")
        st.dataframe(st.session_state.scraped_df.style.format({
            "S·ªë ti·ªÅn b√°n tr√™n lazada": format_vnd,
            "S·ªë l∆∞·ª£ng b√°n": lambda x: f"{int(x):,.0f}".replace(",", ".") if pd.notna(x) else "NaN"
        }))
        
        st.markdown('<p class="sub-header">Bi·ªÉu ƒë·ªì gi√° s·∫£n ph·∫©m t·ª´ Lazada</p>', unsafe_allow_html=True)
        fig = px.bar(st.session_state.scraped_df, x="S·∫£n Ph·∫©m", y="S·ªë ti·ªÅn b√°n tr√™n lazada", 
                     title="Gi√° s·∫£n ph·∫©m t·ª´ Lazada", color="S·∫£n Ph·∫©m", color_discrete_sequence=px.colors.sequential.Oranges)
        fig.update_layout(width=1000, height=600)
        st.plotly_chart(fig, use_container_width=True)
        
        buffer = io.BytesIO()
        st.session_state.scraped_df.to_excel(buffer, index=False)
        st.download_button("T·∫£i xu·ªëng d·ªØ li·ªáu c√†o t·ª´ Lazada", buffer.getvalue(), "lazada_products.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    else:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu c√†o. Vui l√≤ng nh·∫≠p t·ª´ kh√≥a v√† nh·∫•n 'C√†o d·ªØ li·ªáu' trong sidebar.")

# Th√¥ng b√°o n·∫øu ch∆∞a t·∫£i d·ªØ li·ªáu
if df.empty and tab_option != "D·ªØ li·ªáu c√†o t·ª´ Lazada":
    st.warning("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

# Footer
st.markdown("---")
st.markdown("ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi xAI | Ng√†y c·∫≠p nh·∫≠t: 04/03/2025", unsafe_allow_html=True)
